/* Auto-generated by genmsg_cpp for file /home/virus/fuerte_workspace/sandbox/goal_sender/msg/DestinationList.msg */
#ifndef GOAL_SENDER_MESSAGE_DESTINATIONLIST_H
#define GOAL_SENDER_MESSAGE_DESTINATIONLIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point.h"

namespace goal_sender
{
template <class ContainerAllocator>
struct DestinationList_ {
  typedef DestinationList_<ContainerAllocator> Type;

  DestinationList_()
  : names()
  , locations()
  {
  }

  DestinationList_(const ContainerAllocator& _alloc)
  : names(_alloc)
  , locations(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  names;

  typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _locations_type;
  std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  locations;


  typedef boost::shared_ptr< ::goal_sender::DestinationList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::goal_sender::DestinationList_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DestinationList
typedef  ::goal_sender::DestinationList_<std::allocator<void> > DestinationList;

typedef boost::shared_ptr< ::goal_sender::DestinationList> DestinationListPtr;
typedef boost::shared_ptr< ::goal_sender::DestinationList const> DestinationListConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::goal_sender::DestinationList_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::goal_sender::DestinationList_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace goal_sender

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::goal_sender::DestinationList_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::goal_sender::DestinationList_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::goal_sender::DestinationList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "edbe0cb3b8fce1c551c1862dc36469af";
  }

  static const char* value(const  ::goal_sender::DestinationList_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xedbe0cb3b8fce1c5ULL;
  static const uint64_t static_value2 = 0x51c1862dc36469afULL;
};

template<class ContainerAllocator>
struct DataType< ::goal_sender::DestinationList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "goal_sender/DestinationList";
  }

  static const char* value(const  ::goal_sender::DestinationList_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::goal_sender::DestinationList_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string[] names\n\
geometry_msgs/Point[] locations\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
";
  }

  static const char* value(const  ::goal_sender::DestinationList_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::goal_sender::DestinationList_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.names);
    stream.next(m.locations);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DestinationList_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::goal_sender::DestinationList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::goal_sender::DestinationList_<ContainerAllocator> & v) 
  {
    s << indent << "names[]" << std::endl;
    for (size_t i = 0; i < v.names.size(); ++i)
    {
      s << indent << "  names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.names[i]);
    }
    s << indent << "locations[]" << std::endl;
    for (size_t i = 0; i < v.locations.size(); ++i)
    {
      s << indent << "  locations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.locations[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // GOAL_SENDER_MESSAGE_DESTINATIONLIST_H

